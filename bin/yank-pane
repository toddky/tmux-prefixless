#!/usr/bin/env python3

# ==============================================================================
# IMPORT
# ==============================================================================
import atexit
import subprocess
import re
import sys
import termios
import tty

# ==============================================================================
# CAPTURE PANE
# ==============================================================================
pane_id = None
if len(sys.argv) > 1:
    pane_id = sys.argv[1]
capture_cmd = ['tmux', 'capture-pane', '-p', '-e']
if pane_id:
    capture_cmd += ['-t', pane_id]
pane_contents = subprocess.run(capture_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True).stdout.strip()

ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
lines = [ansi_escape.sub('', line.rstrip('\n')) for line in pane_contents.split('\n')]


# ==============================================================================
# FIND MATCHES
# ==============================================================================
def find_matches(lines, regex, group=1):
	'''
	Find matches in lines using regex and group
	'''
	matches = []
	for row, line in enumerate(lines):
		m = re.match(regex, line)
		if not m: continue
		start_col, end_col = m.span(group)
		matches.append([m.group(group), row, start_col, end_col-start_col])
	return matches

all_matches = {}

# todd 755 bin main » <command>
all_matches['command'] = find_matches(lines, r".*»\s*(\S.*)")

# lrwxrwxrwx 1 todd group   11 Jan  1 23:59 file -> /path/to/file
# drwxrwxrwx 1 todd group    0 Jan  1 23:59 dir/
# -rw-r--r-- 1 todd group  10K Jan  1 23:59 file.txt
perms = '[-dl][-r][-w][-x][-r][-w][-x][-r][-w][-x]'
all_matches['file'] = find_matches(lines, r"[-dl]([-r][-w][-x]){3}.* (\S+)", 2)


# ==============================================================================
# GENERATE HINTS
# ==============================================================================
hintchars = 'fdsavcxzrewtgb1234567890jklmuiopyhn'
# Remove 'q' from hintchars because its used for quitting
hintchars = hintchars.replace('q', '')
for key, value in all_matches.items():
	for i, match in enumerate(value):
		try:
			match.append(hintchars[i])
		except IndexError:
			continue


# ==============================================================================
# SCREEN
# ==============================================================================
# REVISIT: Why do I have to print pane contents before setraw()?
clear_screen = "\033[H\033[J"
print(clear_screen)
print(pane_contents, end='')

fd = sys.stdin.fileno()
orig_settings = termios.tcgetattr(fd)
def reset_terminal():
	termios.tcsetattr(fd, termios.TCSADRAIN, orig_settings)
	# Show cursor
	print("\033[?25h")

atexit.register(reset_terminal)
tty.setraw(sys.stdin.fileno())
# Hide cursor
print("\033[?25l")

def print_hint(x, y, hint):
	print(f'\033[{x+2};{y+1}H\033[37;44;1m{hint}\033[0m')

for type, matches in all_matches.items():
	for match in matches:
		hint = f'{type[0]}{match[4]}'
		print_hint(match[1], match[2], hint)


# ==============================================================================
# GETCH
# ==============================================================================
def message(msg):
	subprocess.run(['tmux', 'display-message', msg])

key = ''
keys = ''
while True:
	key = sys.stdin.read(1)
	keys += key
	message(f'Keys: {keys}')

	if key == '\x1b':
		keys = ''
		continue
	if key == 'q':
		message('Quitting...')
		exit(0)

	# find match
	if len(keys) > 1:
		for type, matches in all_matches.items():
			for match in matches:
				hint = f'{type[0]}{match[4]}'
				if keys == hint:
					subprocess.run(['tmux', 'set-buffer', match[0]])
					message(f'Copied: {match[0]}')
					exit(0)

